Looks like we have a problem in FOREACH loops because OrderedSet (return value of "flavoredSet", for example, 
is not a java.util.Collection).

See line 108 in ForEachStatement:

	public void evaluateInternal(XpandExecutionContext ctx) {
		Object o = getTarget().evaluate(ctx);
		if (o == null)
			o = new ArrayList<Object>();

		if (!(o instanceof Collection<?>))
			throw new EvaluationException("Collection expected!", getTarget(), ctx);


The following template fragment can be used to reproduce the problem:

«FOREACH flavoredSet(getKernelEdge()) AS instance2 ITERATOR i2»
	«i2.counter1»: «instance2»	
«ENDFOREACH»


The solution appears to be to create our own list type (OrderedSetType).

----------------------------------------------------------------------------------------------------------------

TODO wrap all OrderedSets returned by the API by OrderedSetDecorator

----------------------------------------------------------------------------------------------------------------


Dynamically populate list of contributed features for a given instance (InstanceType#getContributedFeatures()), based upon its queries.

RootSetType's features should be populated dynamically by reflecting on the Set interface

Add proper Gmodel types to *.ext files, instead of using Object


License - put at root level of distribution.
Use @author in JavaDocs to acknowledge individual contributions 

Re-package to remove references to openarchitectureware


Create basic test infrastructure to execute a workflow programmatically and make assertions 

----------------------------------------------------------------------------------------------------------------

Profile reflective method invocations (see http://crazybob.org/2007/01/fast-reflection.html)
