«EXTENSION org::gmodel::openarchitectureware::kernel»

«REM»
	We should not be using org.s23m.cell.core package in definitions
«ENDREM»

«DEFINE main FOR org::s23m::cell::core::Vertex»

«FILE "documentation.html"»

<html>
	<head>
		<style type="text/css">
			span, td, th, h2 {
				font-family: sans-serif;
			}

			th, h2 {
				color: gray;
			}
			
			table, td, th {
				cell-spacing: 0px;
				cell-padding: 0px; 
			}
			
			table {
				border-collapse: collapse;
			}
		
			td, th {
				padding: 3px;
				padding-left: 10px;
				padding-right: 10px;
				vertical-align: top;
			}
				
			span.metaArtifactName {
				color: #808080;
			}
			
			span.setName {
			}
			
			sub.flavored {
				font-size: 9pt;
				font-variant: small-caps;
			}
			
			span.arrow {
				font-size: 150%;
			}
			
			div.flavorContainer {
				margin: 0px 10px 10px;
				padding: 0px 10px 10px;
			}
			
			div.artifactContainer {
				padding: 0px 5px;
			}
			
			div.artifactContainer h2 {
				margin: 10px;
			}
			
			div.flavorContainer h2 {
				margin: 10px 10px 10px 0;
			}
			
			table, td, th, div.flavorContainer, div.artifactContainer {
				border: 1px solid #c3c3c3;
			}
			
			div.artifactContainer, div.flavorContainer {
				// ignore for IE
				border-radius: 5px;
				-moz-border-radius: 5px;
				-webkit-border-radius: 5px;
			}
			
			span.cardinality {
				color: red;
			}
		</style>
	</head>
	<body>
		«REM»
			WORKING - minCardinality: "«getKernelValues().minCardinality()»"
			minCardinality: "«getKernelValues().minCardinality.identity().name()»"
			isAbstract: "«getKernelValues().isAbstract.identity().name()»"
		«ENDREM»
	
		«REM»Artifact container - START«ENDREM»
		<div class="artifactContainer">
			<h2>«EXPAND displaySet FOR this»</h2>
			
			«REM»Display  <category name> :  <name> in a simple one column table «ENDREM»
			«REM»Vertex-flavored container - START«ENDREM»
			<div class="flavorContainer">
				<h2>«getKernelVertex().identity().name()»«EXPAND flavored»</h2>
				«LET filterFlavor(getKernelVertex()) AS vertexFlavored»
					«IF vertexFlavored.isEmpty»
						«EXPAND emptySet»
					«ELSE»
						<table>
						«FOREACH vertexFlavored AS set»
							<tr>
								«REM» Condition is consistent with other views «ENDREM» 
								<td>«IF set.filterInstances().isEmpty()»«EXPAND displaySet FOR set»«ELSE»«EXPAND displayVertexFlavoredSet FOR set»«ENDIF»</td>
							</tr>
						«ENDFOREACH»
						</table>
					«ENDIF»
				«ENDLET»
			</div>
			«REM»Vertex-flavored container - END«ENDREM»
			
			«REM»SuperSetReference-flavored container - START«ENDREM»
			<div class="flavorContainer">
				<h2>«getKernelSuperSetReference().identity().pluralName()»</h2>
				«LET filterFlavor(getKernelSuperSetReference()) AS superSetReferenceFlavored»
					«IF superSetReferenceFlavored.isEmpty»
						«EXPAND emptySet»
					«ELSE»
						<table>
							<tr>
								<th>sub set</th>
								<th>super set</th>
							</tr>
							«FOREACH superSetReferenceFlavored AS set»
							<tr>
								<td>«EXPAND displaySet FOR set.fromSubSet()»</td>
								<td>«EXPAND displaySet FOR set.toSuperSet()»</td>
							</tr>
							«ENDFOREACH»
						</table>
					«ENDIF»
				«ENDLET»
			</div>
			«REM»SuperSetReference-flavored container - END«ENDREM»
		
			«REM»Edge-flavored container - START«ENDREM»
			<div class="flavorContainer">
				<h2>«getKernelEdge().identity().name()»«EXPAND flavored»</h2>
				«LET filterFlavor(getKernelEdge()) AS edgeFlavored»
					«IF edgeFlavored.isEmpty»
						«EXPAND emptySet»
					«ELSE»
						<table>
							<tr>
								<th><span class="arrow">&larr;</span></th>
								<th>1<sup>st</sup>&nbsp;[min,&nbsp;max]</th>
								<th>«getKernelEdge().identity().name()»«EXPAND flavored»</th>
								<th>2<sup>nd</sup>&nbsp;[min,&nbsp;max]</th>
								<th><span class="arrow">&rarr;</span></th>
							</tr>
							«FOREACH edgeFlavored AS set»
							«LET getKernelValues().minCardinality() AS minCardinality»
							«LET getKernelValues().maxCardinality() AS maxCardinality»
								<tr>
									<td>«EXPAND displaySet FOR set.filterFrom()»</td>
									«LET set.fromEdgeEnd() AS from»
										<td>«EXPAND displaySet FOR from»&nbsp;<span class="cardinality">«from.value(minCardinality).identity().name()»,«from.value(maxCardinality).identity().name()»</span></td>
									«ENDLET»
									<td>«EXPAND displaySet FOR set»</td>
									«LET set.toEdgeEnd() AS to»
										<td>«EXPAND displaySet FOR to»&nbsp;<span class="cardinality">«to.value(minCardinality).identity().name()»,«to.value(maxCardinality).identity().name()»</span></td>
									«ENDLET»
									<td>«EXPAND displaySet FOR set.filterTo()»</td>
								</tr>
							«ENDLET»
							«ENDLET»
							«ENDFOREACH»
						</table>
					«ENDIF»
				«ENDLET»
			</div>
			«REM»Edge-flavored container - END«ENDREM»
			
			«REM»Visibility-flavored container - START«ENDREM»
			<div class="flavorContainer">
				<h2>«getKernelVisibility().identity().name()»«EXPAND flavored»</h2>	
				«LET filterFlavor(getKernelVisibility()) AS visibilityFlavored»
					«IF visibilityFlavored.isEmpty»
						«EXPAND emptySet»
					«ELSE»
						<table>
							<tr>
								<th>from</th>
								<th>to</th>
							</tr>
							«FOREACH visibilityFlavored AS set»
							<tr>
								<td>«EXPAND displaySet FOR set.from()»</td>
								<td>«EXPAND displaySet FOR set.to()»</td>
							</tr>
							«ENDFOREACH»
						</table>
					«ENDIF»
				«ENDLET»
			</div>
			«REM»Visibility-flavored container - END«ENDREM»
	
		</div>
		«REM»Artifact container - END«ENDREM»
	</body>
</html>
«ENDFILE»
«ENDDEFINE»

«DEFINE displayVertexFlavoredSet FOR org::s23m::cell::SetType»<span class="metaArtifactName">«category().identity().name()»</span> : <span class="setName"><a href="«identity().identifier()»">«identity().name()»</a></span>«ENDDEFINE»

«DEFINE displaySet FOR org::s23m::cell::SetType»<span class="metaArtifactName">«category().identity().name()»</span> : <span class="setName">«identity().name()»</span>«ENDDEFINE»

«DEFINE flavored FOR Object»<sub class="flavored">flavored</sub>«ENDDEFINE»

«DEFINE emptySet FOR Object»<span><i>None</i></span>«ENDDEFINE»